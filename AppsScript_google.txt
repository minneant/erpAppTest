const SHEET_HISTORY = '생산기록';
const SHEET_REQUEST = '생산요청';
const SHEET_META = '필요정보';

function doGet(e) {
  const action = e.parameter.action;
  if (!action) {
    return ContentService.createTextOutput("No action provided");
  }

  if (action === 'getProductionHistory') {
    return getSheetData(SHEET_HISTORY);
  } else if (action === 'getProductionRequests') {
    return getSheetData(SHEET_REQUEST);
  } else if (action === 'getMeta') {
    return getMetaData();
  }

  return ContentService.createTextOutput("Invalid action");
}

// ✅ 공통 시트 데이터 읽기 함수
function getSheetData(sheetName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    return ContentService.createTextOutput("Sheet not found: " + sheetName);
  }

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const records = data.slice(1).map(row => {
    let obj = {};
    headers.forEach((key, i) => obj[key] = row[i]);
    return obj;
  });

  return ContentService.createTextOutput(JSON.stringify(records))
    .setMimeType(ContentService.MimeType.JSON);
}

// ✅ 메타 데이터는 특별 처리
function getMetaData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_META);
  const data = sheet.getDataRange().getValues();

  const result = data.slice(1).map(row => ({
    category: row[0],
    name: row[1]
  }));

  return ContentService.createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

// ✅ POST로 생산기록 추가
function doPost(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_HISTORY);
  const params = JSON.parse(e.postData.contents);

  const { date, process, type, line, inch, amount } = params;
  const item = `${type}_${line}_${inch}_${process}`;

  sheet.appendRow([date, process, type, line, inch, item, amount]);

  return ContentService.createTextOutput("Success")
    .setMimeType(ContentService.MimeType.TEXT);
}
